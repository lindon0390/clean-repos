#!/usr/bin/env zx

import 'zx/globals';
import 'path';
import 'process';
import 'fs-extra';
import * as dotenv from 'dotenv';
dotenv.config();

$.verbose = true; //prints all executed commands alongside with their outputs

const dirPath = process.env.PATH_REPOS ?? '';
const DIR_FILE = "dir.json"; // –§–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–ª–∞–≤–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö

await $`echo $PWD`;

// –ß–∏—Ç–∞–µ–º dir.json –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç { "repo-name": "main-branch" }
async function getMainBranches() {
    try {
        const content = await fs.readFile(DIR_FILE, "utf-8");
        return JSON.parse(content);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ dir.json:", error.message);
        return {};
    }
}

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ dirPath, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ dir.json
async function getGitRepos(mainBranches) {
    const repoNames = Object.keys(mainBranches); // –¢–æ–ª—å–∫–æ —Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, —á—Ç–æ –≤ dir.json
    const validRepos = [];

    for (const repoName of repoNames) {
        const repoPath = path.join(dirPath, repoName);
        try {
            await fs.access(path.join(repoPath, ".git")); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            validRepos.push(repoPath);
        } catch {
            console.warn(`‚ö† –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${repoName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ ${dirPath} –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º.`);
        }
    }

    return validRepos;
}

// –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π
async function deleteLocalBranches(repoPath, mainBranch) {
    try {
        await fs.access(path.join(repoPath, ".git")); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .git
        cd(repoPath);
        console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repoPath}`);

        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        console.log("üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞—é –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...");
        await $`git reset --hard || true`;
        await $`git clean -fd || true`;

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –≤–µ—Ç–∫—É
        console.log(`üîÄ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É: ${mainBranch}`);
        await $`git checkout ${mainBranch} || true`;

        // –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è—é git pull –¥–ª—è ${mainBranch}`);
        await $`git pull --rebase || true`;

        // –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏
        console.log("üßπ –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏...");
        await $`git remote prune origin || true`;

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤–µ—Ç–æ–∫, –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–π
        let branches = await $`git branch | grep -v '${mainBranch}' || true`;
        branches = branches.stdout.trim().split("\n").map(b => b.trim()).filter(b => b !== "");

        if (branches.length === 0) {
            console.log("‚úÖ –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
        } else {
            for (const branch of branches) {
                console.log(`üóë –£–¥–∞–ª—è—é –≤–µ—Ç–∫—É: ${branch}`);
                await $`git branch -D ${branch} || true`;
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ –∏ —Å–∂–∞—Ç–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ—Ç–æ–∫
        console.log("üßπ –û—á–∏—â–∞—é –∏ —É–º–µ–Ω—å—à–∞—é —Ä–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...");
        await $`git gc --aggressive --prune=now || true`;

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è pack-—Ñ–∞–π–ª–æ–≤
        console.log("üóú –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é pack-—Ñ–∞–π–ª—ã...");
        await $`git repack -a -d --depth=250 --window=250 || true`;

        console.log("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—á–∏—â–µ–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!");

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${repoPath}:`, error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function processRepos() {
    const mainBranches = await getMainBranches();
    // console.log("üìö –ì–ª–∞–≤–Ω—ã–µ –≤–µ—Ç–∫–∏:", mainBranches);
    const repos = await getGitRepos(mainBranches); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    // console.log("üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:", repos);
    for (const repo of repos) {
        const repoName = path.basename(repo);
        const mainBranch = mainBranches[repoName]; // –ì–ª–∞–≤–Ω–∞—è –≤–µ—Ç–∫–∞ –∏–∑ dir.json
        await deleteLocalBranches(repo, mainBranch);
        console.log("üîÑ –°–ª–µ–¥—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...");
    }

    console.log(`üéâ –í—Å–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã!`);
}

await processRepos();