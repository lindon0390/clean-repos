#!/usr/bin/env zx

import 'zx/globals';
import 'path';
import 'process';
import 'fs-extra';
import * as dotenv from 'dotenv';
dotenv.config();

$.verbose = true; //prints all executed commands alongside with their outputs

const dirPath = process.env.PATH_REPOS ?? '';
const DIR_FILE = "dir.json"; // –§–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–ª–∞–≤–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö

await $`echo $PWD`;

// –ß–∏—Ç–∞–µ–º dir.json –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç { "repo-name": "main-branch" }
async function getMainBranches() {
    try {
        const content = await fs.readFile(DIR_FILE, "utf-8");
        return JSON.parse(content);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ dir.json:", error.message);
        return {};
    }
}

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ dirPath, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ dir.json
async function getGitRepos(mainBranches) {
    const repoNames = Object.keys(mainBranches); // –¢–æ–ª—å–∫–æ —Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, —á—Ç–æ –≤ dir.json
    const validRepos = [];

    for (const repoName of repoNames) {
        const repoPath = path.join(dirPath, repoName);
        try {
            await fs.access(path.join(repoPath, ".git")); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            validRepos.push(repoPath);
        } catch {
            console.warn(`‚ö† –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ${repoName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ ${dirPath} –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º.`);
        }
    }

    return validRepos;
}

// –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π
async function deleteLocalBranches(repoPath, mainBranch) {
    try {
      await fs.access(path.join(repoPath, ".git")); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .git
      cd(repoPath);
      console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repoPath}`);
  
      let branches = await $`git branch | grep -v '${mainBranch}' || true`;
      branches = branches.stdout.trim().split("\n").map(b => b.trim()).filter(b => b !== "");
  
      if (branches.length === 0) {
        console.log("‚úÖ –ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
        return;
      }
  
      for (const branch of branches) {
        console.log(`üóë –£–¥–∞–ª—è—é –≤–µ—Ç–∫—É: ${branch}`);
        await $`git branch -D ${branch} || true`;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${repoPath}:`, error.message);
    }
  }

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function processRepos() {
    const mainBranches = await getMainBranches();
    // console.log("üìö –ì–ª–∞–≤–Ω—ã–µ –≤–µ—Ç–∫–∏:", mainBranches);
    const repos = await getGitRepos(mainBranches); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    // console.log("üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:", repos);
    let i = 0;
    for (const repo of repos) {
        console.log(`üîÑ i = ${i}, –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repo}`);
        if (i == 1) {
            console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ 1 —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏");
            break;
        }
        const repoName = path.basename(repo);
        const mainBranch = mainBranches[repoName]; // –ì–ª–∞–≤–Ω–∞—è –≤–µ—Ç–∫–∞ –∏–∑ dir.json
        await deleteLocalBranches(repo, mainBranch);
        
        i++;
        console.log("üîÑ –°–ª–µ–¥—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...");
    }

    console.log("üéâ –í—Å–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã!");
}

await processRepos();